{"version":3,"sources":["Components/Reading.js","Components/Questions.js","Components/QuizPage.js","Components/QuizIntro.js","Components/IncorrectQuestions.js","Components/QuizResults.js","Components/Header.js","Components/Footer.js","App.js","reportWebVitals.js","index.js"],"names":["Reading","readingTitle","data","reading","title","readingSubTitle","subtitle","readingContent","text","Questions","props","useState","currentQuestion","setCurrentQuestion","questions","answers","answerOptions","nextQuestion","selectedAnswer","param","isCorrect","aVar","incrementScore","userScore","setUserScore","setCorrectQuestions","correctQuestions","Col","Row","md","lg","className","questionText","ListGroup","Item","id","action","onClick","answerText","to","QuizPage","Container","xs","Jumbotron","QuizIntro","Card","style","width","Body","Title","Text","Button","href","IncorrectQuestions","highlightCorrect","newId","variant","QuizResults","totalQuestions","Math","floor","map","p","TitleBlock","Header","Fragment","Breadcrumb","alignContent","Footer","App","length","fluid","basename","path","noGutters","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0e60f00d.chunk.js","sourcesContent":["import data from \"./Data/data.json\";\r\n// import React, { useState } from \"react\";\r\n\r\nfunction Reading() {\r\n  const readingTitle = data[0].reading.title;\r\n  const readingSubTitle = data[0].reading.subtitle;\r\n  const readingContent = data[0].reading.text;\r\n\r\n  return (\r\n    <div>\r\n      <h1>{readingTitle}</h1>\r\n      <h2><i>{readingSubTitle}</i></h2>\r\n      <p>{readingContent}</p>\r\n\r\n    </div>\r\n  );\r\n}\r\nexport default Reading;\r\n","import data from \"./Data/data.json\";\r\nimport React, { useState } from \"react\";\r\nimport ListGroup from \"react-bootstrap/ListGroup\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nfunction Questions(props) {\r\n  const [currentQuestion, setCurrentQuestion] = useState(0);\r\n  const questions = data[0].reading.questions[currentQuestion];\r\n  const answers = questions ? questions.answerOptions : null;\r\n  const nextQuestion = currentQuestion + 1;\r\n\r\n\r\n  function selectedAnswer(param) {\r\n    if (param.isCorrect) {\r\n      let aVar = incrementScore(props.userScore);\r\n      props.setUserScore(aVar);\r\n    } else {\r\n      props.setCorrectQuestions([...props.correctQuestions, questions]);\r\n    }\r\n    nextQuestionFunc();\r\n  }\r\n\r\n  function nextQuestionFunc() {\r\n    setCurrentQuestion(nextQuestion);\r\n  }\r\n\r\n  function incrementScore(param) {\r\n    if (param < 0) {\r\n      param = 0;\r\n    }\r\n    let newScore = param + 1;\r\n    return newScore;\r\n  }\r\n\r\n  //if necessary return a redirect (if no next question)\r\n  if (answers != null) {\r\n    return (\r\n      <Col>\r\n        <Row md={1} lg={1} className=\"text-center\">\r\n          <h2>{questions.questionText}</h2>\r\n        </Row>\r\n        <Row md={1} lg={1} className=\"p-5\">\r\n          <ListGroup className=\"height100\">\r\n            <ListGroup.Item\r\n              id=\"1\"\r\n              action\r\n              onClick={() => selectedAnswer(answers[0])}\r\n            >\r\n              {answers[0].answerText}\r\n            </ListGroup.Item>\r\n            <ListGroup.Item\r\n              id=\"2\"\r\n              action\r\n              onClick={() => selectedAnswer(answers[1])}\r\n            >\r\n              {answers[1].answerText}\r\n            </ListGroup.Item>\r\n            <ListGroup.Item\r\n              id=\"3\"\r\n              action\r\n              onClick={() => selectedAnswer(answers[2])}\r\n            >\r\n              {answers[2].answerText}\r\n            </ListGroup.Item>\r\n            <ListGroup.Item\r\n              id=\"4\"\r\n              action\r\n              onClick={() => selectedAnswer(answers[3])}\r\n            >\r\n              {answers[3].answerText}\r\n            </ListGroup.Item>\r\n          </ListGroup>\r\n        </Row>\r\n      </Col>\r\n    );\r\n  } else {\r\n    return (\r\n      <Row>\r\n        <Redirect to=\"/QuizScore\" />\r\n      </Row>\r\n    );\r\n  }\r\n}\r\nexport default Questions;\r\n","import Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\r\nimport Reading from \"./Reading\";\r\nimport Questions from \"./Questions\";\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"../myStyles.css\";\r\n\r\nfunction QuizPage(props) {\r\n  return (\r\n    <Container className=\"quizpagepadding\">\r\n      <Row>\r\n        <Col className=\"p-50\" xs={5} >\r\n          <Jumbotron className=\"reading\">\r\n            <Reading />\r\n          </Jumbotron>\r\n        </Col>\r\n        <Col>\r\n          <Jumbotron>\r\n            <Questions\r\n              userScore={props.userScore}\r\n              setUserScore={props.setUserScore}\r\n              setCorrectQuestions={props.setCorrectQuestions}\r\n              correctQuestions={props.correctQuestions}\r\n            />\r\n          </Jumbotron>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default QuizPage;\r\n","import Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nfunction QuizIntro(props) {\r\n  return (\r\n    <Container className=\"automargintb\">\r\n      <Row>\r\n        <Col>\r\n          <Card style={{ width: \"100%\" }}>\r\n            <Card.Body>\r\n              <Card.Title>Instructions</Card.Title>\r\n              <Card.Text>\r\n                This is a quiz to assess your ability to read a paragraph and\r\n                answer questions. When you are ready, press Begin and you will be\r\n                taken to the next page to begin the quiz.\r\n              </Card.Text>\r\n              <Button href=\"/Quiz\">Begin</Button>\r\n            </Card.Body>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default QuizIntro;\r\n","import React from \"react\";\r\nimport ListGroup from \"react-bootstrap/ListGroup\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Card from \"react-bootstrap/Card\";\r\n\r\nfunction IncorrectQuestions(props) {\r\n  function highlightCorrect(param) {\r\n    let newId = param.id;\r\n    if (param.isCorrect) {\r\n      return (\r\n        <ListGroup.Item id={newId} variant=\"success\">\r\n          {param.answerText}\r\n        </ListGroup.Item>\r\n      );\r\n    } else {\r\n      return (\r\n        <ListGroup.Item id={newId} variant=\"danger\">\r\n          {param.answerText}\r\n        </ListGroup.Item>\r\n      );\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Col>\r\n      <Card>\r\n        <Card.Body>\r\n          <Card.Title>{props.questions.questionText}</Card.Title>\r\n            <ListGroup className=\"height100\">\r\n              {highlightCorrect(props.questions.answerOptions[0])}\r\n              {highlightCorrect(props.questions.answerOptions[1])}\r\n              {highlightCorrect(props.questions.answerOptions[2])}\r\n              {highlightCorrect(props.questions.answerOptions[3])}\r\n            </ListGroup>\r\n        </Card.Body>\r\n      </Card>\r\n    </Col>\r\n  );\r\n}\r\nexport default IncorrectQuestions;\r\n","import Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport { Jumbotron } from \"react-bootstrap\";\r\nimport IncorrectQuestions from \"./IncorrectQuestions\";\r\nimport \"../myStyles.css\";\r\n\r\nfunction QuizResults(props) {\r\n  if (props.userScore >= 0 && props.userScore !== props.totalQuestions) {\r\n    return (\r\n      <Container className=\"quizresults\">\r\n        <Row>\r\n          <Jumbotron className=\"results text-center\">\r\n            <h1>\r\n              <u>YOUR PERFORMANCE</u>\r\n            </h1>\r\n            <br></br>\r\n            <h3>\r\n              You answered {props.userScore}/{props.totalQuestions} or{\" \"}\r\n              {Math.floor((props.userScore / props.totalQuestions) * 100)}% of the questions\r\n              correct.{\" \"}\r\n            </h3>\r\n            <br></br>\r\n          </Jumbotron>\r\n        </Row>\r\n        <Row>\r\n          <Jumbotron className=\"results text-center correctanswers\">\r\n            <h2>\r\n              Below are the questions you missed with correct answers\r\n              highlighted in green.\r\n            </h2>\r\n            <Row>\r\n              {props.correctQuestions.map((p) => {\r\n                return (\r\n                  <Col md=\"3\" key={p.id}>\r\n                    <IncorrectQuestions questions={p} />\r\n                  </Col>\r\n                );\r\n              })}\r\n            </Row>\r\n          </Jumbotron>\r\n        </Row>\r\n      </Container>\r\n    );\r\n  } else if (props.userScore === props.totalQuestions){\r\n    return (\r\n      <Container className=\"quizresults\">\r\n        <Row>\r\n          <Jumbotron className=\"results text-center\">\r\n            <h1>\r\n              <u>YOUR PERFORMANCE</u>\r\n            </h1>\r\n            <br></br>\r\n            <h3>\r\n              You answered {props.userScore}/{props.totalQuestions} or{\" \"}\r\n              {Math.floor((props.userScore / props.totalQuestions) * 100)}% of the questions\r\n              correct.{\" \"} Good job!\r\n            </h3>\r\n            <br></br>\r\n          </Jumbotron>\r\n        </Row>\r\n      </Container>\r\n    )\r\n\r\n  }else{\r\n    return (\r\n      <Container className=\"gotoquizpage\">\r\n        <Jumbotron className=\"results text-center\">\r\n          <h1>\r\n            You haven't taken the quiz yet. Go to the Quiz Page and take the\r\n            quiz!\r\n          </h1>\r\n        </Jumbotron>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default QuizResults;\r\n","import \"../Styles/Header.css\";\r\nimport { Col } from \"react-bootstrap\";\r\nimport Breadcrumb from \"react-bootstrap/Breadcrumb\";\r\nimport React from \"react\";\r\nimport \"../myStyles.css\";\r\n\r\nfunction TitleBlock() {\r\n  return (\r\n    <div id=\"title-block\">\r\n      <div className=\"title\">Reading Quiz</div>\r\n      <div className=\"subtitle\">By Dallen Magill</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Header() {\r\n  return (\r\n    <React.Fragment>\r\n      <Col className=\"sidemargins15px\">\r\n        <Breadcrumb\r\n          style={{ alignContent: \"center\" }}\r\n          className=\"toppadding15px centerandfitbreadcrumb\"\r\n        >\r\n          <Breadcrumb.Item className=\"whitetext\" href=\"/\">Home</Breadcrumb.Item>\r\n          <Breadcrumb.Item className=\"whitetext\" href=\"/Quiz\">Quiz Page</Breadcrumb.Item>\r\n          <Breadcrumb.Item className=\"whitetext\" href=\"/QuizScore\">Quiz Results</Breadcrumb.Item>\r\n        </Breadcrumb>\r\n      </Col>\r\n      <Col className=\"verticalpadding15px\">\r\n        <TitleBlock/>\r\n      </Col>\r\n      <Col></Col>\r\n    </React.Fragment>\r\n\r\n    // <Container>\r\n    //   <Col>\r\n    //   </Col>\r\n    //   <Col>\r\n    //     <TitleBlock />\r\n    //   </Col>\r\n    // </Container>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nfunction Footer() {\r\n  return <p className=\"text-center\">&copy; 2021 BYU - Dallen Magill</p>;\r\n}\r\nexport default Footer;\r\n","import \"./App.css\";\nimport data from \"./Components/Data/data.json\";\nimport React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport QuizPage from \"./Components/QuizPage\";\nimport QuizIntro from \"./Components/QuizIntro\";\nimport QuizResults from \"./Components/QuizResults\";\nimport Header from \"./Components/Header\";\nimport Footer from \"./Components/Footer\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./myStyles.css\";\nimport { Container, Row } from \"react-bootstrap\";\nimport { useState } from \"react\";\n\nfunction App() {\n  const [userScore, setUserScore] = useState(-1);\n  const [totalQuestions] = useState(data[0].reading.questions.length);\n  const [correctQuestions, setCorrectQuestions] = useState([]);\n\n  return (\n    <Router>\n      <Container className=\"p-0 min-vh-100 d-flex flex-column\" fluid>\n        <Row\n          className=\"flex-grow-0 flex-shrink-0 shadow-sm margins0 header\"\n          // style={{ backgroundColor: \"#242582\", color: \"white\" }}\n        >\n          <Header />\n        </Row>\n        <Row md=\"auto\" className=\"justify-content-md-center flex-grow-1 introandresultsbackground\">\n          <Switch basename='/'>\n            <Route path=\"/QuizScore\">\n              <QuizResults\n                userScore={userScore}\n                totalQuestions={totalQuestions}\n                correctQuestions={correctQuestions}\n              />\n            </Route>\n            <Route path=\"/Quiz\">\n              <QuizPage\n                userScore={userScore}\n                setUserScore={setUserScore}\n                setCorrectQuestions={setCorrectQuestions}\n                correctQuestions={correctQuestions}\n              />\n            </Route>\n            <Route path=\"\">\n              <QuizIntro />\n            </Route>\n          </Switch>\n        </Row>\n        <Row noGutters className=\"flex-grow-0 flex-shrink-0 text-center footer\">\n          <Footer />\n        </Row>\n      </Container>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport {HashRouter} from \"react-router-dom\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}